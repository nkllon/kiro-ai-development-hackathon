"""
Base interfaces for compliance checking components.

Defines the core interfaces that all compliance checking components must implement
to ensure consistent behavior and integration with the Beast Mode ecosystem.
"""

from abc import ABC, abstractmethod
from typing import List, Dict, Any, Optional
from dataclasses import dataclass

from .models import ComplianceAnalysisResult, ComplianceIssue


class ComplianceValidator(ABC):
    """Base interface for all compliance validators."""
    
    @abstractmethod
    def validate(self, target: Any) -> List[ComplianceIssue]:
        """
        Validate the target against compliance rules.
        
        Args:
            target: The object to validate (commit, file, module, etc.)
            
        Returns:
            List of compliance issues found
        """
        pass
    
    @abstractmethod
    def get_validator_name(self) -> str:
        """Get the name of this validator."""
        pass


class ComplianceAnalyzer(ABC):
    """Base interface for compliance analysis components."""
    
    @abstractmethod
    def analyze(self, context: Dict[str, Any]) -> ComplianceAnalysisResult:
        """
        Analyze the given context for compliance.
        
        Args:
            context: Analysis context containing relevant data
            
        Returns:
            Comprehensive analysis result
        """
        pass
    
    @abstractmethod
    def get_analyzer_name(self) -> str:
        """Get the name of this analyzer."""
        pass


class ComplianceReporter(ABC):
    """Base interface for compliance reporting components."""
    
    @abstractmethod
    def generate_report(self, analysis_result: ComplianceAnalysisResult) -> str:
        """
        Generate a compliance report from analysis results.
        
        Args:
            analysis_result: The compliance analysis results
            
        Returns:
            Formatted compliance report
        """
        pass
    
    @abstractmethod
    def get_report_format(self) -> str:
        """Get the format of reports generated by this reporter."""
        pass


@dataclass
class ValidationContext:
    """Context information for compliance validation."""
    repository_path: str
    target_branch: str = "main"
    base_branch: str = "origin/master"
    include_patterns: Optional[List[str]] = None
    exclude_patterns: Optional[List[str]] = None
    additional_metadata: Optional[Dict[str, Any]] = None