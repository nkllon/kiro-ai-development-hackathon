{
  "test_patterns": [
    {
      "pattern_id": "test_pattern_test_import_error_1757027307",
      "pattern_name": "Prevent test_import_error in test:tests/test_imports.py",
      "failure_signature": "test:test:tests/test_imports.py|dependency_issue|ImportError: No module named 'missing_module'|['analysis_source', 'failure_type', 'pytest_node_id', 'test_class', 'test_context', 'test_file', 'test_function']",
      "root_cause_pattern": "Test import error - missing or broken test dependencies",
      "prevention_steps": [
        "Analyze broken_dependencies systematically",
        "Implement root cause fix",
        "Check if modules are installed: pip list | grep <module>",
        "Validate fix addresses root cause",
        "Identify missing modules from error message",
        "Install missing dependencies: pip install <module>"
      ],
      "detection_criteria": [
        "Monitor for test_import_error in test execution",
        "Automated detection of dependency_issue failures",
        "Proactive test environment validation"
      ],
      "automated_checks": [
        "Automated check for test_import_error",
        "Continuous test environment monitoring",
        "Preventive test dependency validation"
      ],
      "pattern_hash": "c7a20ca5"
    },
    {
      "pattern_id": "test_pattern_permission_denied_1757027307",
      "pattern_name": "Prevent permission_denied in test:tests/test_permissions.py",
      "failure_signature": "test:test:tests/test_permissions.py|permission_issue|PermissionError: [Errno 13] Permission denied: '/root/protected_file'|['analysis_source', 'failure_type', 'pytest_node_id', 'test_class', 'test_context', 'test_file', 'test_function']",
      "root_cause_pattern": "Insufficient permissions for file access",
      "prevention_steps": [
        "Verify user has necessary access rights",
        "Identify files with incorrect permissions",
        "Apply correct permissions using chmod"
      ],
      "detection_criteria": [
        "Monitor for permission_denied in test execution",
        "Automated detection of permission_issue failures",
        "Proactive test environment validation"
      ],
      "automated_checks": [
        "Automated check for permission_denied",
        "Continuous test environment monitoring",
        "Preventive test dependency validation"
      ],
      "pattern_hash": "b5196250"
    },
    {
      "pattern_id": "test_pattern_test_assertion_failure_1757027308",
      "pattern_name": "Prevent test_assertion_failure in test:tests/test_logic.py",
      "failure_signature": "test:test:tests/test_logic.py|unknown|AssertionError: Expected 5, got 3|['analysis_source', 'failure_type', 'pytest_node_id', 'test_class', 'test_context', 'test_file', 'test_function']",
      "root_cause_pattern": "Test assertion failure - test logic or implementation issue",
      "prevention_steps": [
        "Check if test data or fixtures are correct",
        "Review test logic and expected vs actual values",
        "Analyze assertion failure details from stack trace"
      ],
      "detection_criteria": [
        "Monitor for test_assertion_failure in test execution",
        "Automated detection of unknown failures",
        "Proactive test environment validation"
      ],
      "automated_checks": [
        "Automated check for test_assertion_failure",
        "Continuous test environment monitoring",
        "Preventive test dependency validation"
      ],
      "pattern_hash": "9b4e42eb"
    },
    {
      "pattern_id": "test_pattern_test_assertion_failure_1757027424",
      "pattern_name": "Prevent test_assertion_failure in test:tests/test_module_1.py",
      "failure_signature": "test:test:tests/test_module_1.py|unknown|AssertionError: Expected 1, got 2|['analysis_source', 'failure_type', 'pytest_node_id', 'test_class', 'test_context', 'test_file', 'test_function']",
      "root_cause_pattern": "Test assertion failure - test logic or implementation issue",
      "prevention_steps": [
        "Check if test data or fixtures are correct",
        "Analyze assertion failure details from stack trace",
        "Review test logic and expected vs actual values"
      ],
      "detection_criteria": [
        "Monitor for test_assertion_failure in test execution",
        "Automated detection of unknown failures",
        "Proactive test environment validation"
      ],
      "automated_checks": [
        "Automated check for test_assertion_failure",
        "Continuous test environment monitoring",
        "Preventive test dependency validation"
      ],
      "pattern_hash": "7e0ff0af"
    },
    {
      "pattern_id": "test_pattern_test_assertion_failure_1757027425",
      "pattern_name": "Prevent test_assertion_failure in test:tests/test_module_6.py",
      "failure_signature": "test:test:tests/test_module_6.py|unknown|AssertionError: Expected 6, got 7|['analysis_source', 'failure_type', 'pytest_node_id', 'test_class', 'test_context', 'test_file', 'test_function']",
      "root_cause_pattern": "Test assertion failure - test logic or implementation issue",
      "prevention_steps": [
        "Check if test data or fixtures are correct",
        "Analyze assertion failure details from stack trace",
        "Review test logic and expected vs actual values"
      ],
      "detection_criteria": [
        "Monitor for test_assertion_failure in test execution",
        "Automated detection of unknown failures",
        "Proactive test environment validation"
      ],
      "automated_checks": [
        "Automated check for test_assertion_failure",
        "Continuous test environment monitoring",
        "Preventive test dependency validation"
      ],
      "pattern_hash": "4b3c01cb"
    },
    {
      "pattern_id": "test_pattern_test_assertion_failure_1757027430",
      "pattern_name": "Prevent test_assertion_failure in test:tests/test_module_1.py",
      "failure_signature": "test:test:tests/test_module_1.py|resource_exhaustion|AssertionError: Expected 11, got 12|['analysis_source', 'failure_type', 'pytest_node_id', 'test_class', 'test_context', 'test_file', 'test_function']",
      "root_cause_pattern": "Test assertion failure - test logic or implementation issue",
      "prevention_steps": [
        "Check if test data or fixtures are correct",
        "Analyze assertion failure details from stack trace",
        "Review test logic and expected vs actual values"
      ],
      "detection_criteria": [
        "Monitor for test_assertion_failure in test execution",
        "Automated detection of resource_exhaustion failures",
        "Proactive test environment validation"
      ],
      "automated_checks": [
        "Automated check for test_assertion_failure",
        "Continuous test environment monitoring",
        "Preventive test dependency validation"
      ],
      "pattern_hash": "d80bbb8e"
    },
    {
      "pattern_id": "test_pattern_test_assertion_failure_1757027441",
      "pattern_name": "Prevent test_assertion_failure in test:tests/test_module_6.py",
      "failure_signature": "test:test:tests/test_module_6.py|resource_exhaustion|AssertionError: Expected 26, got 27|['analysis_source', 'failure_type', 'pytest_node_id', 'test_class', 'test_context', 'test_file', 'test_function']",
      "root_cause_pattern": "Test assertion failure - test logic or implementation issue",
      "prevention_steps": [
        "Check if test data or fixtures are correct",
        "Analyze assertion failure details from stack trace",
        "Review test logic and expected vs actual values"
      ],
      "detection_criteria": [
        "Monitor for test_assertion_failure in test execution",
        "Automated detection of resource_exhaustion failures",
        "Proactive test environment validation"
      ],
      "automated_checks": [
        "Automated check for test_assertion_failure",
        "Continuous test environment monitoring",
        "Preventive test dependency validation"
      ],
      "pattern_hash": "4387c78a"
    },
    {
      "pattern_id": "test_pattern_test_assertion_failure_1757028638",
      "pattern_name": "Prevent test_assertion_failure in test:tests/test_api.py",
      "failure_signature": "test:test:tests/test_api.py|unknown|AssertionError: Expected status code 200, got 404|['analysis_source', 'failure_type', 'pytest_node_id', 'test_class', 'test_context', 'test_file', 'test_function']",
      "root_cause_pattern": "Test assertion failure - test logic or implementation issue",
      "prevention_steps": [
        "Check if test data or fixtures are correct",
        "Analyze assertion failure details from stack trace",
        "Review test logic and expected vs actual values"
      ],
      "detection_criteria": [
        "Monitor for test_assertion_failure in test execution",
        "Automated detection of unknown failures",
        "Proactive test environment validation"
      ],
      "automated_checks": [
        "Automated check for test_assertion_failure",
        "Continuous test environment monitoring",
        "Preventive test dependency validation"
      ],
      "pattern_hash": "08d2b266"
    },
    {
      "pattern_id": "test_pattern_test_assertion_failure_1757028643",
      "pattern_name": "Prevent test_assertion_failure in test:tests/test_api_endpoints.py",
      "failure_signature": "test:test:tests/test_api_endpoints.py|unknown|AssertionError: 401 != 200 : Authentication failed for protected endpoint|['analysis_source', 'failure_type', 'pytest_node_id', 'test_class', 'test_context', 'test_file', 'test_function']",
      "root_cause_pattern": "Test assertion failure - test logic or implementation issue",
      "prevention_steps": [
        "Check if test data or fixtures are correct",
        "Analyze assertion failure details from stack trace",
        "Review test logic and expected vs actual values"
      ],
      "detection_criteria": [
        "Monitor for test_assertion_failure in test execution",
        "Automated detection of unknown failures",
        "Proactive test environment validation"
      ],
      "automated_checks": [
        "Automated check for test_assertion_failure",
        "Continuous test environment monitoring",
        "Preventive test dependency validation"
      ],
      "pattern_hash": "c55faaff"
    },
    {
      "pattern_id": "test_pattern_test_assertion_failure_1757028646",
      "pattern_name": "Prevent test_assertion_failure in test:tests/test_business.py",
      "failure_signature": "test:test:tests/test_business.py|unknown|AssertionError: Expected total_amount to be 150.0, got 120.0|['analysis_source', 'failure_type', 'pytest_node_id', 'test_class', 'test_context', 'test_file', 'test_function']",
      "root_cause_pattern": "Test assertion failure - test logic or implementation issue",
      "prevention_steps": [
        "Check if test data or fixtures are correct",
        "Analyze assertion failure details from stack trace",
        "Review test logic and expected vs actual values"
      ],
      "detection_criteria": [
        "Monitor for test_assertion_failure in test execution",
        "Automated detection of unknown failures",
        "Proactive test environment validation"
      ],
      "automated_checks": [
        "Automated check for test_assertion_failure",
        "Continuous test environment monitoring",
        "Preventive test dependency validation"
      ],
      "pattern_hash": "ae58e5d9"
    },
    {
      "pattern_id": "test_pattern_test_assertion_failure_1757028648",
      "pattern_name": "Prevent test_assertion_failure in test:tests/test_regression.py",
      "failure_signature": "test:test:tests/test_regression.py|unknown|AssertionError: Basic test|['analysis_source', 'failure_type', 'pytest_node_id', 'test_class', 'test_context', 'test_file', 'test_function']",
      "root_cause_pattern": "Test assertion failure - test logic or implementation issue",
      "prevention_steps": [
        "Check if test data or fixtures are correct",
        "Analyze assertion failure details from stack trace",
        "Review test logic and expected vs actual values"
      ],
      "detection_criteria": [
        "Monitor for test_assertion_failure in test execution",
        "Automated detection of unknown failures",
        "Proactive test environment validation"
      ],
      "automated_checks": [
        "Automated check for test_assertion_failure",
        "Continuous test environment monitoring",
        "Preventive test dependency validation"
      ],
      "pattern_hash": "3dac58d0"
    },
    {
      "pattern_id": "test_pattern_test_assertion_failure_1757029660",
      "pattern_name": "Prevent test_assertion_failure in test:tests/test_views.py",
      "failure_signature": "test:test:tests/test_views.py|unknown|AssertionError: 500 != 200 : Expected successful response, got server error|['analysis_source', 'failure_type', 'pytest_node_id', 'test_class', 'test_context', 'test_file', 'test_function']",
      "root_cause_pattern": "Test assertion failure - test logic or implementation issue",
      "prevention_steps": [
        "Check if test data or fixtures are correct",
        "Analyze assertion failure details from stack trace",
        "Review test logic and expected vs actual values"
      ],
      "detection_criteria": [
        "Monitor for test_assertion_failure in test execution",
        "Automated detection of unknown failures",
        "Proactive test environment validation"
      ],
      "automated_checks": [
        "Automated check for test_assertion_failure",
        "Continuous test environment monitoring",
        "Preventive test dependency validation"
      ],
      "pattern_hash": "084a6eff"
    }
  ],
  "last_updated": "2025-09-04T19:51:18.784725",
  "pattern_count": 12
}