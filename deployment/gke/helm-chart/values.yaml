# Systematic PDCA Orchestrator - Helm Values
replicaCount: 3

image:
  repository: gcr.io/PROJECT_ID/systematic-pdca-orchestrator
  pullPolicy: IfNotPresent
  tag: "latest"

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations:
    iam.gke.io/gcp-service-account: systematic-pdca@PROJECT_ID.iam.gserviceaccount.com
  name: "systematic-pdca-sa"

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8080"
  prometheus.io/path: "/metrics"

podSecurityContext:
  fsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 80
  targetPort: 8080

ingress:
  enabled: true
  className: "gce"
  annotations:
    kubernetes.io/ingress.global-static-ip-name: "systematic-pdca-ip"
    networking.gke.io/managed-certificates: "systematic-pdca-ssl-cert"
    kubernetes.io/ingress.allow-http: "true"
  hosts:
    - host: systematic-pdca.YOUR_DOMAIN.com
      paths:
        - path: /*
          pathType: ImplementationSpecific
  tls: []

resources:
  limits:
    cpu: 1000m
    memory: 2Gi
  requests:
    cpu: 500m
    memory: 1Gi

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - systematic-pdca-orchestrator
        topologyKey: kubernetes.io/hostname

# Application configuration
config:
  environment: "production"
  logLevel: "INFO"
  port: 8080
  pythonPath: "/app"

# Health check configuration
healthCheck:
  enabled: true
  path: "/health"
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessCheck:
  enabled: true
  path: "/health"
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 2

startupCheck:
  enabled: true
  path: "/health"
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Network Policy
networkPolicy:
  enabled: true
  ingress:
    enabled: true
    from:
      - namespaceSelector:
          matchLabels:
            name: istio-system
      - namespaceSelector:
          matchLabels:
            name: kube-system
  egress:
    enabled: true
    to: [] # Allow all egress

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: false
    interval: 30s
    path: /metrics