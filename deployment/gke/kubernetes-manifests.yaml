# Systematic PDCA Orchestrator - GKE Deployment Manifests
apiVersion: v1
kind: Namespace
metadata:
  name: systematic-pdca
  labels:
    app: systematic-pdca-orchestrator
    environment: production

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: systematic-pdca-config
  namespace: systematic-pdca
data:
  ENVIRONMENT: "production"
  PYTHONPATH: "/app"
  LOG_LEVEL: "INFO"
  PORT: "8080"

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: systematic-pdca-sa
  namespace: systematic-pdca
  annotations:
    iam.gke.io/gcp-service-account: systematic-pdca@PROJECT_ID.iam.gserviceaccount.com

---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: systematic-pdca-orchestrator
  namespace: systematic-pdca
  labels:
    app: systematic-pdca-orchestrator
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: systematic-pdca-orchestrator
  template:
    metadata:
      labels:
        app: systematic-pdca-orchestrator
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: systematic-pdca-sa
      containers:
      - name: systematic-pdca-orchestrator
        image: gcr.io/PROJECT_ID/systematic-pdca-orchestrator:latest
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: PORT
          value: "8080"
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: systematic-pdca-config
              key: ENVIRONMENT
        - name: PYTHONPATH
          valueFrom:
            configMapKeyRef:
              name: systematic-pdca-config
              key: PYTHONPATH
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: systematic-pdca-config
              key: LOG_LEVEL
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      terminationGracePeriodSeconds: 30

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: systematic-pdca-hpa
  namespace: systematic-pdca
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: systematic-pdca-orchestrator
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# Service
apiVersion: v1
kind: Service
metadata:
  name: systematic-pdca-service
  namespace: systematic-pdca
  labels:
    app: systematic-pdca-orchestrator
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: systematic-pdca-orchestrator

---
# Ingress with Google Cloud Load Balancer
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: systematic-pdca-ingress
  namespace: systematic-pdca
  annotations:
    kubernetes.io/ingress.class: "gce"
    kubernetes.io/ingress.global-static-ip-name: "systematic-pdca-ip"
    networking.gke.io/managed-certificates: "systematic-pdca-ssl-cert"
    kubernetes.io/ingress.allow-http: "true"
spec:
  rules:
  - host: systematic-pdca.YOUR_DOMAIN.com
    http:
      paths:
      - path: /*
        pathType: ImplementationSpecific
        backend:
          service:
            name: systematic-pdca-service
            port:
              number: 80

---
# Managed SSL Certificate
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: systematic-pdca-ssl-cert
  namespace: systematic-pdca
spec:
  domains:
    - systematic-pdca.YOUR_DOMAIN.com

---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: systematic-pdca-pdb
  namespace: systematic-pdca
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: systematic-pdca-orchestrator

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: systematic-pdca-netpol
  namespace: systematic-pdca
spec:
  podSelector:
    matchLabels:
      app: systematic-pdca-orchestrator
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - {} # Allow all egress for external API calls